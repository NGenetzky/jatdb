# coding: utf-8

"""
    jatdb

    JSON API to DB: Fetch JSON from APIs and send to a TinyDB database.  # noqa: E501

    OpenAPI spec version: 0.0.2
    Contact: Nathan@Genetzky.us
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EverdoTag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'title_ts': 'str',
        'color': 'int',
        'color_ts': 'int',
        'type': 'str',
        'type_ts': 'int',
        'created_on': 'int',
        'changed_ts': 'int',
        'removed_ts': 'int'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'title_ts': 'title_ts',
        'color': 'color',
        'color_ts': 'color_ts',
        'type': 'type',
        'type_ts': 'type_ts',
        'created_on': 'created_on',
        'changed_ts': 'changed_ts',
        'removed_ts': 'removed_ts'
    }

    def __init__(self, id=None, title=None, title_ts=None, color=None, color_ts=None, type=None, type_ts=None, created_on=None, changed_ts=None, removed_ts=None):  # noqa: E501
        """EverdoTag - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self._title_ts = None
        self._color = None
        self._color_ts = None
        self._type = None
        self._type_ts = None
        self._created_on = None
        self._changed_ts = None
        self._removed_ts = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if title_ts is not None:
            self.title_ts = title_ts
        if color is not None:
            self.color = color
        if color_ts is not None:
            self.color_ts = color_ts
        if type is not None:
            self.type = type
        if type_ts is not None:
            self.type_ts = type_ts
        if created_on is not None:
            self.created_on = created_on
        if changed_ts is not None:
            self.changed_ts = changed_ts
        if removed_ts is not None:
            self.removed_ts = removed_ts

    @property
    def id(self):
        """Gets the id of this EverdoTag.  # noqa: E501

        TODO  # noqa: E501

        :return: The id of this EverdoTag.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EverdoTag.

        TODO  # noqa: E501

        :param id: The id of this EverdoTag.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this EverdoTag.  # noqa: E501

        TODO  # noqa: E501

        :return: The title of this EverdoTag.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EverdoTag.

        TODO  # noqa: E501

        :param title: The title of this EverdoTag.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def title_ts(self):
        """Gets the title_ts of this EverdoTag.  # noqa: E501

        TODO  # noqa: E501

        :return: The title_ts of this EverdoTag.  # noqa: E501
        :rtype: str
        """
        return self._title_ts

    @title_ts.setter
    def title_ts(self, title_ts):
        """Sets the title_ts of this EverdoTag.

        TODO  # noqa: E501

        :param title_ts: The title_ts of this EverdoTag.  # noqa: E501
        :type: str
        """

        self._title_ts = title_ts

    @property
    def color(self):
        """Gets the color of this EverdoTag.  # noqa: E501

        TODO  # noqa: E501

        :return: The color of this EverdoTag.  # noqa: E501
        :rtype: int
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this EverdoTag.

        TODO  # noqa: E501

        :param color: The color of this EverdoTag.  # noqa: E501
        :type: int
        """

        self._color = color

    @property
    def color_ts(self):
        """Gets the color_ts of this EverdoTag.  # noqa: E501

        TODO  # noqa: E501

        :return: The color_ts of this EverdoTag.  # noqa: E501
        :rtype: int
        """
        return self._color_ts

    @color_ts.setter
    def color_ts(self, color_ts):
        """Sets the color_ts of this EverdoTag.

        TODO  # noqa: E501

        :param color_ts: The color_ts of this EverdoTag.  # noqa: E501
        :type: int
        """

        self._color_ts = color_ts

    @property
    def type(self):
        """Gets the type of this EverdoTag.  # noqa: E501

        TODO  # noqa: E501

        :return: The type of this EverdoTag.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EverdoTag.

        TODO  # noqa: E501

        :param type: The type of this EverdoTag.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def type_ts(self):
        """Gets the type_ts of this EverdoTag.  # noqa: E501

        TODO  # noqa: E501

        :return: The type_ts of this EverdoTag.  # noqa: E501
        :rtype: int
        """
        return self._type_ts

    @type_ts.setter
    def type_ts(self, type_ts):
        """Sets the type_ts of this EverdoTag.

        TODO  # noqa: E501

        :param type_ts: The type_ts of this EverdoTag.  # noqa: E501
        :type: int
        """

        self._type_ts = type_ts

    @property
    def created_on(self):
        """Gets the created_on of this EverdoTag.  # noqa: E501

        TODO  # noqa: E501

        :return: The created_on of this EverdoTag.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this EverdoTag.

        TODO  # noqa: E501

        :param created_on: The created_on of this EverdoTag.  # noqa: E501
        :type: int
        """

        self._created_on = created_on

    @property
    def changed_ts(self):
        """Gets the changed_ts of this EverdoTag.  # noqa: E501

        TODO  # noqa: E501

        :return: The changed_ts of this EverdoTag.  # noqa: E501
        :rtype: int
        """
        return self._changed_ts

    @changed_ts.setter
    def changed_ts(self, changed_ts):
        """Sets the changed_ts of this EverdoTag.

        TODO  # noqa: E501

        :param changed_ts: The changed_ts of this EverdoTag.  # noqa: E501
        :type: int
        """

        self._changed_ts = changed_ts

    @property
    def removed_ts(self):
        """Gets the removed_ts of this EverdoTag.  # noqa: E501

        TODO  # noqa: E501

        :return: The removed_ts of this EverdoTag.  # noqa: E501
        :rtype: int
        """
        return self._removed_ts

    @removed_ts.setter
    def removed_ts(self, removed_ts):
        """Sets the removed_ts of this EverdoTag.

        TODO  # noqa: E501

        :param removed_ts: The removed_ts of this EverdoTag.  # noqa: E501
        :type: int
        """

        self._removed_ts = removed_ts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EverdoTag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
